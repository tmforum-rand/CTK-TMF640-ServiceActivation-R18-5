{
	"info": {
		"_postman_id": "aec1235e-50c9-44b5-a05b-5962a6810437",
		"name": "CTK-TMF640-ServiceActivationAndConfiguration-R18-5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TC_ServiceActivation_N0 - Preparation",
			"item": [
				{
					"name": "Create one Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75050ef7-b7c4-4016-a2c6-dbf0af6233e6",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.globals.set(\"IDSI01\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"serviceType\": \"Cloud\",\n        \"name\": \"vCPE serial 1355615\",\n        \"description\": \"Instantiation of vCPE\",\n        \"state\": \"feasibilityChecked\",\n        \"category\": \"CFS\",\n        \"isServiceEnabled\": true,\n        \"hasStarted\": true,\n        \"startMode\": \"1\",\n        \"isStateful\": true,\n        \"serviceDate\": \"2018-01-15T12:26:11.747Z\",\n        \"startDate\": \"2018-01-15T12:26:11.747Z\",\n        \"serviceSpecification\": {\n            \"id\": \"1212\",\n            \"href\": \"https://mycsp.com:8080/tmf-api/serviceCatalogManagement/v4/serviceSpecification/1212\",\n            \"name\": \"vCPE\",\n            \"version\": \"1.0.0\",\n            \"@referredType\": \"vCPE\"\n        },\n        \"serviceCharacteristic\": [\n            {\n                \"name\": \"vCPE_IP\",\n                \"valueType\": \"object\",\n                \"value\": {\n                    \"@type\": \"IPAddress\",\n                    \"@schemaLocation\": \"https://mycsp.com:8080/tmf-api/schema/Service/IPAddress.schema.json\",\n                    \"address\": \"193.218.236.21\"\n                }\n            }\n        ],\n        \"serviceRelationship\": [\n            {\n                \"relationshipType\": \"DependentOn\",\n                \"service\": {\n                    \"href\": \"https://mycsp.com:8080/tmf-api/serviceInventoryManagement/v4/service/5645\",\n                    \"id\": \"5645\",\n                    \"@referredType\": \"vOS\"\n                }\n            }\n        ],\n        \"supportingService\": [\n            {\n                \"href\": \"https://mycsp.com:8080/tmf-api/serviceInventoryManagement/v4/service/5885\",\n                \"id\": \"5885\",\n                \"@referredType\": \"vJavaVM\"\n            }\n        ],\n        \"supportingResource\": [\n            {\n                \"id\": \"6161\",\n                \"href\": \"https://mycsp.com:8080/tmf-api/resourceInventoryManagement/v4/resource/https://mycsp.com:8080/tmf-api/serviceInventoryManagement/v4/service/5351\",\n                \"name\": \"GenInfra\",\n                \"@referredType\": \"Infra\"\n            },\n            {\n                \"id\": \"7171\",\n                \"href\": \"https://mycsp.com:8080/tmf-api/resourceInventoryManagement/v4/resource/https://mycsp.com:8080/tmf-api/serviceInventoryManagement/v4/service/7171\",\n                \"name\": \"BNG_MUX\",\n                \"@referredType\": \"MUX\"\n            }\n        ],\n        \"relatedParty\": [\n            {\n                \"href\": \"mycsp.com:8080/tmf-api/partyManagement/v4/party/456\",\n                \"id\": \"456\",\n                \"name\": \"John Doe\",\n                \"role\": \"user\"\n            }\n        ],\n        \"serviceOrder\": [\n            {\n                \"href\": \"https://mycsp.com:8080/tmf-api/serviceOrderManagement/v4/serviceOrder/42\",\n                \"id\": \"42\",\n                \"serviceOrderItemId\": \"1\"\n            }\n        ],\n        \"place\": [\n            {\n                \"href\": \"https://mycsp.com:8080/tmf-api/addressManagement/v4/place/2435\",\n                \"id\": \"2435\",\n                \"name\": \"Customer primary location\",\n                \"role\": \"InstallationAddress\"\n            }\n        ],\n        \"note\": [\n            {\n                \"author\": \"Jean Pontus\",\n                \"date\": \"2018-01-15T12:26:11.748Z\",\n                \"text\": \"This service was installed automatically, no issues were noted in testing.\"\n            }\n        ],\n        \"@type\": \"vCPE\",\n        \"@schemaLocation\": \"https://mycsp.com:8080/tmf-api/schema/Service/vCPE.schema.json\",\n        \"@baseType\": \"Service\"\n    }"
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service/",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create another Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a60e46f9-63bd-423a-a224-6dba6d832f64",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.globals.set(\"IDSI02\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"serviceType\": \"CFS\",\n        \"name\": \"Nice Service\",\n        \"description\": \"CFS\",\n        \"state\": \"active\",\n        \"category\": \"CFS\",\n        \"isServiceEnabled\": true,\n        \"hasStarted\": true,\n        \"startMode\": \"1\",\n        \"isStateful\": true,\n        \"serviceDate\": \"2018-01-15T12:26:11.747Z\",\n        \"startDate\": \"2018-01-15T12:26:11.747Z\",\n        \"serviceSpecification\": {\n            \"id\": \"1212\",\n            \"href\": \"https://mycsp.com:8080/tmf-api/serviceCatalogManagement/v4/serviceSpecification/1212\",\n            \"name\": \"vCPE\",\n            \"version\": \"1.0.0\",\n            \"@referredType\": \"vCPE\"\n        },\n        \"serviceCharacteristic\": [\n            {\n                \"name\": \"vCPE_IP\",\n                \"valueType\": \"object\",\n                \"value\": {\n                    \"@type\": \"IPAddress\",\n                    \"@schemaLocation\": \"https://mycsp.com:8080/tmf-api/schema/Service/IPAddress.schema.json\",\n                    \"address\": \"193.218.236.21\"\n                }\n            }\n        ],\n        \"serviceRelationship\": [\n            {\n                \"relationshipType\": \"DependentOn\",\n                \"service\": {\n                    \"href\": \"https://mycsp.com:8080/tmf-api/serviceInventoryManagement/v4/service/5645\",\n                    \"id\": \"5645\",\n                    \"@referredType\": \"vOS\"\n                }\n            }\n        ],\n        \"supportingService\": [\n            {\n                \"href\": \"https://mycsp.com:8080/tmf-api/serviceInventoryManagement/v4/service/5885\",\n                \"id\": \"5885\",\n                \"@referredType\": \"vJavaVM\"\n            }\n        ],\n        \"supportingResource\": [\n            {\n                \"id\": \"6161\",\n                \"href\": \"https://mycsp.com:8080/tmf-api/resourceInventoryManagement/v4/resource/https://mycsp.com:8080/tmf-api/serviceInventoryManagement/v4/service/5351\",\n                \"name\": \"GenInfra\",\n                \"@referredType\": \"Infra\"\n            },\n            {\n                \"id\": \"7171\",\n                \"href\": \"https://mycsp.com:8080/tmf-api/resourceInventoryManagement/v4/resource/https://mycsp.com:8080/tmf-api/serviceInventoryManagement/v4/service/7171\",\n                \"name\": \"BNG_MUX\",\n                \"@referredType\": \"MUX\"\n            }\n        ],\n        \"relatedParty\": [\n            {\n                \"href\": \"mycsp.com:8080/tmf-api/partyManagement/v4/party/456\",\n                \"id\": \"456\",\n                \"name\": \"John Doe\",\n                \"role\": \"user\"\n            }\n        ],\n        \"serviceOrder\": [\n            {\n                \"href\": \"https://mycsp.com:8080/tmf-api/serviceOrderManagement/v4/serviceOrder/42\",\n                \"id\": \"42\",\n                \"serviceOrderItemId\": \"1\"\n            }\n        ],\n        \"place\": [\n            {\n                \"href\": \"https://mycsp.com:8080/tmf-api/addressManagement/v4/place/2435\",\n                \"id\": \"2435\",\n                \"name\": \"Customer primary location\",\n                \"role\": \"InstallationAddress\"\n            }\n        ],\n        \"note\": [\n            {\n                \"author\": \"Jean Pontus\",\n                \"date\": \"2018-01-15T12:26:11.748Z\",\n                \"text\": \"This service was installed automatically, no issues were noted in testing.\"\n            }\n        ],\n        \"@type\": \"vCPE\",\n        \"@schemaLocation\": \"https://mycsp.com:8080/tmf-api/schema/Service/vCPE.schema.json\",\n        \"@baseType\": \"Service\"\n    }"
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service/",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TC_ServiceActivation_N1 â€“ Retrieve a service from its id",
			"item": [
				{
					"name": "Retrieve a Service by it's ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7591239-54a9-43eb-a9d0-0aa00c000d9a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = [ 'id', 'href', 'name', 'description', 'state', 'category', 'startDate', 'serviceRelationship', 'serviceCharacteristic', 'supportingService', 'supportingResource', 'serviceSpecification', 'relatedParty', 'place' ];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response id attribute is of type string', function() { pm.expect(instance.id).to.be.a('string'); });",
									"pm.test('Response href attribute is of type string', function() { pm.expect(instance.href).to.be.a('string'); });",
									"pm.test('Response name attribute is of type string', function() { pm.expect(instance.name).to.be.a('string'); });",
									"pm.test('Response description attribute is of type string', function() { pm.expect(instance.description).to.be.a('string'); });",
									"pm.test('Response state attribute is of type string', function() { pm.expect(instance.state).to.be.a('string'); });",
									"pm.test('Response category attribute is of type string', function() { pm.expect(instance.category).to.be.a('string'); });",
									"pm.test('Response startDate attribute is of type string', function() { pm.expect(instance.startDate).to.be.a('string'); });",
									"pm.test('Response serviceRelationship attribute is of type array', function() { pm.expect(instance.serviceRelationship).to.be.a('array'); });",
									"pm.test('Response serviceRelationship.relationshipType attribute is of type string', function() { pm.expect(instance.serviceRelationship[0].relationshipType).to.be.a('string'); });",
									"pm.test('Response serviceRelationship.service attribute is of type object', function() { pm.expect(instance.serviceRelationship[0].service).to.be.an('object'); });",
									"pm.test('Response serviceCharacteristic attribute is of type array', function() { pm.expect(instance.serviceCharacteristic).to.be.a('array'); });",
									"pm.test('Response serviceCharacteristic.valueType attribute is of type string', function() { pm.expect(instance.serviceCharacteristic[0].valueType).to.be.a('string'); });",
									"pm.test('Response serviceCharacteristic.value attribute is of type object', function() { pm.expect(instance.serviceCharacteristic[0].value).to.be.an('object'); });",
									"pm.test('Response supportingService attribute is of type array', function() { pm.expect(instance.supportingService).to.be.a('array'); });",
									"pm.test('Response supportingService.id attribute is of type string', function() { pm.expect(instance.supportingService[0].id).to.be.a('string'); });",
									"pm.test('Response supportingService.href attribute is of type string', function() { pm.expect(instance.supportingService[0].href).to.be.a('string'); });",
									"pm.test('Response supportingResource attribute is of type array', function() { pm.expect(instance.supportingResource).to.be.a('array'); });",
									"pm.test('Response supportingResource.id attribute is of type string', function() { pm.expect(instance.supportingResource[0].id).to.be.a('string'); });",
									"pm.test('Response supportingResource.href attribute is of type string', function() { pm.expect(instance.supportingResource[0].href).to.be.a('string'); });",
									"pm.test('Response serviceSpecification attribute is of type object', function() { pm.expect(instance.serviceSpecification).to.be.a('object'); });",
									"pm.test('Response serviceSpecification.id attribute is of type string', function() { pm.expect(instance.serviceSpecification.id).to.be.a('string'); });",
									"pm.test('Response serviceSpecification.href attribute is of type string', function() { pm.expect(instance.serviceSpecification.href).to.be.a('string'); });",
									"pm.test('Response serviceSpecification.version attribute is of type string', function() { pm.expect(instance.serviceSpecification.version).to.be.a('string'); });",
									"pm.test('Response relatedParty attribute is of type array', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"pm.test('Response relatedParty.id attribute is of type string', function() { pm.expect(instance.relatedParty[0].id).to.be.a('string'); });",
									"pm.test('Response relatedParty.href attribute is of type string', function() { pm.expect(instance.relatedParty[0].href).to.be.a('string'); });",
									"pm.test('Response relatedParty.role attribute is of type string', function() { pm.expect(instance.relatedParty[0].role).to.be.a('string'); });",
									"pm.test('Response place attribute is of type array', function() { pm.expect(instance.place).to.be.a('array'); });",
									"pm.test('Response place.id attribute is of type string', function() { pm.expect(instance.place[0].id).to.be.a('string'); });",
									"pm.test('Response place.href attribute is of type string', function() { pm.expect(instance.place[0].href).to.be.a('string'); });",
									"",
									"",
									"pm.test('id is set', function() {pm.globals.set('IDSI01', instance.id); pm.expect(instance.id) == pm.globals.get(\"IDSI01\");});",
									"pm.test('href is set', function() {pm.globals.set('HREFSI01', instance.href); pm.expect(instance.href) == pm.globals.get(\"HREFSI01\");});",
									"pm.test('name is set', function() {pm.globals.set('NAMESI01', instance.name); pm.expect(instance.name) == pm.globals.get(\"NAMESI01\");});",
									"pm.test('description is set', function() {pm.globals.set('DESCRIPTIONSI01', instance.description); pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI01\");});",
									"pm.test('state is set', function() {pm.globals.set('STATESI01', instance.state); pm.expect(instance.state) == pm.globals.get(\"STATESI01\");});",
									"pm.test('category is set', function() {pm.globals.set('CATEGORYSI01', instance.category); pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI01\");});",
									"pm.test('startDate is set', function() {pm.globals.set('STARTDATESI01', instance.startDate); pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI01\");});",
									"pm.test('serviceRelationship is set', function() {pm.globals.set('SERVICERELATIONSHIPSI01', instance.serviceRelationship); pm.expect(instance.serviceRelationship) == pm.globals.get(\"SERVICERELATIONSHIPSI01\");});",
									"pm.test('serviceRelationship_relationshipType is set', function() {pm.globals.set('SERVICERELATIONSHIP_RELATIONSHIPTYPESI01', instance.serviceRelationship[0].relationshipType); pm.expect(instance.serviceRelationship[0].relationshipType) == pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI01\");});",
									"pm.test('serviceRelationship_service is set', function() {pm.globals.set('SERVICERELATIONSHIP_SERVICESI01', instance.serviceRelationship[0].service); pm.expect(instance.serviceRelationship[0].service) == pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI01\");});",
									"pm.test('serviceCharacteristic is set', function() {pm.globals.set('SERVICECHARACTERISTICSI01', instance.serviceCharacteristic); pm.expect(instance.serviceCharacteristic) == pm.globals.get(\"SERVICECHARACTERISTICSI01\");});",
									"pm.test('serviceCharacteristic_valueType is set', function() {pm.globals.set('SERVICECHARACTERISTIC_VALUETYPESI01', instance.serviceCharacteristic[0].valueType); pm.expect(instance.serviceCharacteristic[0].valueType) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\");});",
									"pm.test('serviceCharacteristic_value is set', function() {pm.globals.set('SERVICECHARACTERISTIC_VALUESI01', instance.serviceCharacteristic[0].value); pm.expect(instance.serviceCharacteristic[0].value) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI01\");});",
									"pm.test('supportingService is set', function() {pm.globals.set('SUPPORTINGSERVICESI01', instance.supportingService); pm.expect(instance.supportingService) == pm.globals.get(\"SUPPORTINGSERVICESI01\");});",
									"pm.test('supportingService_id is set', function() {pm.globals.set('SUPPORTINGSERVICE_IDSI01', instance.supportingService[0].id); pm.expect(instance.supportingService[0].id) == pm.globals.get(\"SUPPORTINGSERVICE_IDSI01\");});",
									"pm.test('supportingService_href is set', function() {pm.globals.set('SUPPORTINGSERVICE_HREFSI01', instance.supportingService[0].href); pm.expect(instance.supportingService[0].href) == pm.globals.get(\"SUPPORTINGSERVICE_HREFSI01\");});",
									"pm.test('supportingResource is set', function() {pm.globals.set('SUPPORTINGRESOURCESI01', instance.supportingResource); pm.expect(instance.supportingResource) == pm.globals.get(\"SUPPORTINGRESOURCESI01\");});",
									"pm.test('supportingResource_id is set', function() {pm.globals.set('SUPPORTINGRESOURCE_IDSI01', instance.supportingResource[0].id); pm.expect(instance.supportingResource[0].id) == pm.globals.get(\"SUPPORTINGRESOURCE_IDSI01\");});",
									"pm.test('supportingResource_href is set', function() {pm.globals.set('SUPPORTINGRESOURCE_HREFSI01', instance.supportingResource[0].href); pm.expect(instance.supportingResource[0].href) == pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI01\");});",
									"pm.test('serviceSpecification is set', function() {pm.globals.set('SERVICESPECIFICATIONSI01', instance.serviceSpecification); pm.expect(instance.serviceSpecification) == pm.globals.get(\"SERVICESPECIFICATIONSI01\");});",
									"pm.test('serviceSpecification_id is set', function() {pm.globals.set('SERVICESPECIFICATION_IDSI01', instance.serviceSpecification.id); pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI01\");});",
									"pm.test('serviceSpecification_href is set', function() {pm.globals.set('SERVICESPECIFICATION_HREFSI01', instance.serviceSpecification.href); pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\");});",
									"pm.test('serviceSpecification_version is set', function() {pm.globals.set('SERVICESPECIFICATION_VERSIONSI01', instance.serviceSpecification.version); pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\");});",
									"pm.test('relatedParty is set', function() {pm.globals.set('RELATEDPARTYSI01', instance.relatedParty); pm.expect(instance.relatedParty) == pm.globals.get(\"RELATEDPARTYSI01\");});",
									"pm.test('relatedParty_id is set', function() {pm.globals.set('RELATEDPARTY_IDSI01', instance.relatedParty[0].id); pm.expect(instance.relatedParty[0].id) == pm.globals.get(\"RELATEDPARTY_IDSI01\");});",
									"pm.test('relatedParty_href is set', function() {pm.globals.set('RELATEDPARTY_HREFSI01', instance.relatedParty[0].href); pm.expect(instance.relatedParty[0].href) == pm.globals.get(\"RELATEDPARTY_HREFSI01\");});",
									"pm.test('relatedParty_role is set', function() {pm.globals.set('RELATEDPARTY_ROLESI01', instance.relatedParty[0].role); pm.expect(instance.relatedParty[0].role) == pm.globals.get(\"RELATEDPARTY_ROLESI01\");});",
									"pm.test('place is set', function() {pm.globals.set('PLACESI01', instance.place); pm.expect(instance.place) == pm.globals.get(\"PLACESI01\");});",
									"pm.test('place_id is set', function() {pm.globals.set('PLACE_IDSI01', instance.place[0].id); pm.expect(instance.place[0].id) == pm.globals.get(\"PLACE_IDSI01\");});",
									"pm.test('place_href is set', function() {pm.globals.set('PLACE_HREFSI01', instance.place[0].href); pm.expect(instance.place[0].href) == pm.globals.get(\"PLACE_HREFSI01\");});",
									"",
									"",
									"pm.test(\"Body includes value held on id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.id);",
									"      });",
									"pm.test(\"Body includes value held on href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.href);",
									"      });",
									"pm.test(\"Body includes value held on name\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.name);",
									"      });",
									"pm.test(\"Body includes value held on description\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.description);",
									"      });",
									"pm.test(\"Body includes value held on state\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.state);",
									"      });",
									"pm.test(\"Body includes value held on category\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.category);",
									"      });",
									"pm.test(\"Body includes value held on startDate\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.startDate);",
									"      });",
									"pm.test(\"Body includes value held on serviceRelationship[0].relationshipType\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceRelationship[0].relationshipType);",
									"      });",
									"pm.test(\"Body includes value held on serviceCharacteristic[0].valueType\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceCharacteristic[0].valueType);",
									"      });",
									"pm.test(\"Body includes value held on supportingService[0].id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.supportingService[0].id);",
									"      });",
									"pm.test(\"Body includes value held on supportingService[0].href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.supportingService[0].href);",
									"      });",
									"pm.test(\"Body includes value held on supportingResource[0].id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.supportingResource[0].id);",
									"      });",
									"pm.test(\"Body includes value held on supportingResource[0].href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.supportingResource[0].href);",
									"      });",
									"pm.test(\"Body includes value held on serviceSpecification.id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceSpecification.id);",
									"      });",
									"pm.test(\"Body includes value held on serviceSpecification.href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceSpecification.href);",
									"      });",
									"pm.test(\"Body includes value held on serviceSpecification.version\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceSpecification.version);",
									"      });",
									"pm.test(\"Body includes value held on relatedParty[0].id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.relatedParty[0].id);",
									"      });",
									"pm.test(\"Body includes value held on relatedParty[0].href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.relatedParty[0].href);",
									"      });",
									"pm.test(\"Body includes value held on relatedParty[0].role\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.relatedParty[0].role);",
									"      });",
									"pm.test(\"Body includes value held on place[0].id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.place[0].id);",
									"      });",
									"pm.test(\"Body includes value held on place[0].href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.place[0].href);",
									"      });",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service/{{IDSI01}}",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service",
								"{{IDSI01}}"
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				},
				{
					"name": "Retrieve a Service by it's ID 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb0376b2-d43f-4f8d-b125-4d15673066b5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = [ 'id', 'href', 'name', 'description', 'state', 'category', 'startDate', 'serviceRelationship', 'serviceCharacteristic', 'supportingService', 'supportingResource', 'serviceSpecification', 'relatedParty', 'place',  ];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response id attribute is of type string', function() { pm.expect(instance.id).to.be.a('string'); });",
									"pm.test('Response href attribute is of type string', function() { pm.expect(instance.href).to.be.a('string'); });",
									"pm.test('Response name attribute is of type string', function() { pm.expect(instance.name).to.be.a('string'); });",
									"pm.test('Response description attribute is of type string', function() { pm.expect(instance.description).to.be.a('string'); });",
									"pm.test('Response state attribute is of type string', function() { pm.expect(instance.state).to.be.a('string'); });",
									"pm.test('Response category attribute is of type string', function() { pm.expect(instance.category).to.be.a('string'); });",
									"pm.test('Response startDate attribute is of type string', function() { pm.expect(instance.startDate).to.be.a('string'); });",
									"pm.test('Response serviceRelationship attribute is of type array', function() { pm.expect(instance.serviceRelationship).to.be.a('array'); });",
									"pm.test('Response serviceRelationship.relationshipType attribute is of type string', function() { pm.expect(instance.serviceRelationship[0].relationshipType).to.be.a('string'); });",
									"pm.test('Response serviceRelationship.service attribute is of type object', function() { pm.expect(instance.serviceRelationship[0].service).to.be.an('object'); });",
									"pm.test('Response serviceCharacteristic attribute is of type array', function() { pm.expect(instance.serviceCharacteristic).to.be.a('array'); });",
									"pm.test('Response serviceCharacteristic.valueType attribute is of type string', function() { pm.expect(instance.serviceCharacteristic[0].valueType).to.be.a('string'); });",
									"pm.test('Response serviceCharacteristic.value attribute is of type object', function() { pm.expect(instance.serviceCharacteristic[0].value).to.be.an('object'); });",
									"pm.test('Response supportingService attribute is of type array', function() { pm.expect(instance.supportingService).to.be.a('array'); });",
									"pm.test('Response supportingService.id attribute is of type string', function() { pm.expect(instance.supportingService[0].id).to.be.a('string'); });",
									"pm.test('Response supportingService.href attribute is of type string', function() { pm.expect(instance.supportingService[0].href).to.be.a('string'); });",
									"pm.test('Response supportingResource attribute is of type array', function() { pm.expect(instance.supportingResource).to.be.a('array'); });",
									"pm.test('Response supportingResource.id attribute is of type string', function() { pm.expect(instance.supportingResource[0].id).to.be.a('string'); });",
									"pm.test('Response supportingResource.href attribute is of type string', function() { pm.expect(instance.supportingResource[0].href).to.be.a('string'); });",
									"pm.test('Response serviceSpecification attribute is of type object', function() { pm.expect(instance.serviceSpecification).to.be.a('object'); });",
									"pm.test('Response serviceSpecification.id attribute is of type string', function() { pm.expect(instance.serviceSpecification.id).to.be.a('string'); });",
									"pm.test('Response serviceSpecification.href attribute is of type string', function() { pm.expect(instance.serviceSpecification.href).to.be.a('string'); });",
									"pm.test('Response serviceSpecification.version attribute is of type string', function() { pm.expect(instance.serviceSpecification.version).to.be.a('string'); });",
									"pm.test('Response relatedParty attribute is of type array', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"pm.test('Response relatedParty.id attribute is of type string', function() { pm.expect(instance.relatedParty[0].id).to.be.a('string'); });",
									"pm.test('Response relatedParty.href attribute is of type string', function() { pm.expect(instance.relatedParty[0].href).to.be.a('string'); });",
									"pm.test('Response relatedParty.role attribute is of type string', function() { pm.expect(instance.relatedParty[0].role).to.be.a('string'); });",
									"pm.test('Response place attribute is of type array', function() { pm.expect(instance.place).to.be.a('array'); });",
									"pm.test('Response place.id attribute is of type string', function() { pm.expect(instance.place[0].id).to.be.a('string'); });",
									"pm.test('Response place.href attribute is of type string', function() { pm.expect(instance.place[0].href).to.be.a('string'); });",
									"",
									"",
									"pm.test('id is set', function() {pm.globals.set('IDSI02', instance.id); pm.expect(instance.id) == pm.globals.get(\"IDSI02\");});",
									"pm.test('href is set', function() {pm.globals.set('HREFSI02', instance.href); pm.expect(instance.href) == pm.globals.get(\"HREFSI02\");});",
									"pm.test('name is set', function() {pm.globals.set('NAMESI02', instance.name); pm.expect(instance.name) == pm.globals.get(\"NAMESI02\");});",
									"pm.test('description is set', function() {pm.globals.set('DESCRIPTIONSI02', instance.description); pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI02\");});",
									"pm.test('state is set', function() {pm.globals.set('STATESI02', instance.state); pm.expect(instance.state) == pm.globals.get(\"STATESI02\");});",
									"pm.test('category is set', function() {pm.globals.set('CATEGORYSI02', instance.category); pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI02\");});",
									"pm.test('startDate is set', function() {pm.globals.set('STARTDATESI02', instance.startDate); pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI02\");});",
									"pm.test('serviceRelationship is set', function() {pm.globals.set('SERVICERELATIONSHIPSI02', instance.serviceRelationship); pm.expect(instance.serviceRelationship) == pm.globals.get(\"SERVICERELATIONSHIPSI02\");});",
									"pm.test('serviceRelationship_relationshipType is set', function() {pm.globals.set('SERVICERELATIONSHIP_RELATIONSHIPTYPESI02', instance.serviceRelationship[0].relationshipType); pm.expect(instance.serviceRelationship[0].relationshipType) == pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI02\");});",
									"pm.test('serviceRelationship_service is set', function() {pm.globals.set('SERVICERELATIONSHIP_SERVICESI02', instance.serviceRelationship[0].service); pm.expect(instance.serviceRelationship[0].service) == pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI02\");});",
									"pm.test('serviceCharacteristic is set', function() {pm.globals.set('SERVICECHARACTERISTICSI02', instance.serviceCharacteristic); pm.expect(instance.serviceCharacteristic) == pm.globals.get(\"SERVICECHARACTERISTICSI02\");});",
									"pm.test('serviceCharacteristic_valueType is set', function() {pm.globals.set('SERVICECHARACTERISTIC_VALUETYPESI02', instance.serviceCharacteristic[0].valueType); pm.expect(instance.serviceCharacteristic[0].valueType) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI02\");});",
									"pm.test('serviceCharacteristic_value is set', function() {pm.globals.set('SERVICECHARACTERISTIC_VALUESI02', instance.serviceCharacteristic[0].value); pm.expect(instance.serviceCharacteristic[0].value) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI02\");});",
									"pm.test('supportingService is set', function() {pm.globals.set('SUPPORTINGSERVICESI02', instance.supportingService); pm.expect(instance.supportingService) == pm.globals.get(\"SUPPORTINGSERVICESI02\");});",
									"pm.test('supportingService_id is set', function() {pm.globals.set('SUPPORTINGSERVICE_IDSI02', instance.supportingService[0].id); pm.expect(instance.supportingService[0].id) == pm.globals.get(\"SUPPORTINGSERVICE_IDSI02\");});",
									"pm.test('supportingService_href is set', function() {pm.globals.set('SUPPORTINGSERVICE_HREFSI02', instance.supportingService[0].href); pm.expect(instance.supportingService[0].href) == pm.globals.get(\"SUPPORTINGSERVICE_HREFSI02\");});",
									"pm.test('supportingResource is set', function() {pm.globals.set('SUPPORTINGRESOURCESI02', instance.supportingResource); pm.expect(instance.supportingResource) == pm.globals.get(\"SUPPORTINGRESOURCESI02\");});",
									"pm.test('supportingResource_id is set', function() {pm.globals.set('SUPPORTINGRESOURCE_IDSI02', instance.supportingResource[0].id); pm.expect(instance.supportingResource[0].id) == pm.globals.get(\"SUPPORTINGRESOURCE_IDSI02\");});",
									"pm.test('supportingResource_href is set', function() {pm.globals.set('SUPPORTINGRESOURCE_HREFSI02', instance.supportingResource[0].href); pm.expect(instance.supportingResource[0].href) == pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI02\");});",
									"pm.test('serviceSpecification is set', function() {pm.globals.set('SERVICESPECIFICATIONSI02', instance.serviceSpecification); pm.expect(instance.serviceSpecification) == pm.globals.get(\"SERVICESPECIFICATIONSI02\");});",
									"pm.test('serviceSpecification_id is set', function() {pm.globals.set('SERVICESPECIFICATION_IDSI02', instance.serviceSpecification.id); pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI02\");});",
									"pm.test('serviceSpecification_href is set', function() {pm.globals.set('SERVICESPECIFICATION_HREFSI02', instance.serviceSpecification.href); pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI02\");});",
									"pm.test('serviceSpecification_version is set', function() {pm.globals.set('SERVICESPECIFICATION_VERSIONSI02', instance.serviceSpecification.version); pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI02\");});",
									"pm.test('relatedParty is set', function() {pm.globals.set('RELATEDPARTYSI02', instance.relatedParty); pm.expect(instance.relatedParty) == pm.globals.get(\"RELATEDPARTYSI02\");});",
									"pm.test('relatedParty_id is set', function() {pm.globals.set('RELATEDPARTY_IDSI02', instance.relatedParty[0].id); pm.expect(instance.relatedParty[0].id) == pm.globals.get(\"RELATEDPARTY_IDSI02\");});",
									"pm.test('relatedParty_href is set', function() {pm.globals.set('RELATEDPARTY_HREFSI02', instance.relatedParty[0].href); pm.expect(instance.relatedParty[0].href) == pm.globals.get(\"RELATEDPARTY_HREFSI02\");});",
									"pm.test('relatedParty_role is set', function() {pm.globals.set('RELATEDPARTY_ROLESI02', instance.relatedParty[0].role); pm.expect(instance.relatedParty[0].role) == pm.globals.get(\"RELATEDPARTY_ROLESI02\");});",
									"pm.test('place is set', function() {pm.globals.set('PLACESI02', instance.place); pm.expect(instance.place) == pm.globals.get(\"PLACESI02\");});",
									"pm.test('place_id is set', function() {pm.globals.set('PLACE_IDSI02', instance.place[0].id); pm.expect(instance.place[0].id) == pm.globals.get(\"PLACE_IDSI02\");});",
									"pm.test('place_href is set', function() {pm.globals.set('PLACE_HREFSI02', instance.place[0].href); pm.expect(instance.place[0].href) == pm.globals.get(\"PLACE_HREFSI02\");});",
									"",
									"",
									"pm.test(\"Body includes value held on id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.id);",
									"      });",
									"pm.test(\"Body includes value held on href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.href);",
									"      });",
									"pm.test(\"Body includes value held on name\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.name);",
									"      });",
									"pm.test(\"Body includes value held on description\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.description);",
									"      });",
									"pm.test(\"Body includes value held on state\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.state);",
									"      });",
									"pm.test(\"Body includes value held on category\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.category);",
									"      });",
									"pm.test(\"Body includes value held on startDate\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.startDate);",
									"      });",
									"pm.test(\"Body includes value held on serviceRelationship[0].relationshipType\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceRelationship[0].relationshipType);",
									"      });",
									"pm.test(\"Body includes value held on serviceCharacteristic[0].valueType\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceCharacteristic[0].valueType);",
									"      });",
									"pm.test(\"Body includes value held on supportingService[0].id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.supportingService[0].id);",
									"      });",
									"pm.test(\"Body includes value held on supportingService[0].href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.supportingService[0].href);",
									"      });",
									"pm.test(\"Body includes value held on supportingResource[0].id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.supportingResource[0].id);",
									"      });",
									"pm.test(\"Body includes value held on supportingResource[0].href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.supportingResource[0].href);",
									"      });",
									"pm.test(\"Body includes value held on serviceSpecification.id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceSpecification.id);",
									"      });",
									"pm.test(\"Body includes value held on serviceSpecification.href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceSpecification.href);",
									"      });",
									"pm.test(\"Body includes value held on serviceSpecification.version\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.serviceSpecification.version);",
									"      });",
									"pm.test(\"Body includes value held on relatedParty[0].id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.relatedParty[0].id);",
									"      });",
									"pm.test(\"Body includes value held on relatedParty[0].href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.relatedParty[0].href);",
									"      });",
									"pm.test(\"Body includes value held on relatedParty[0].role\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.relatedParty[0].role);",
									"      });",
									"pm.test(\"Body includes value held on place[0].id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.place[0].id);",
									"      });",
									"pm.test(\"Body includes value held on place[0].href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.place[0].href);",
									"      });",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service/{{IDSI02}}",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service",
								"{{IDSI02}}"
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			],
			"description": "This test case needs to have a service pre-existing already on the server side"
		},
		{
			"name": "TC_ServiceActivation_N2 â€“ Search for Service with specific characteristics",
			"item": [
				{
					"name": "Retrieve a list of services by one characteristic",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b2630e-996b-4f05-bf51-c0db23757562",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Category Service 1 must be equal to Category Service 2 if fail consult documentation\", function () {",
									"    return (pm.globals.get(\"CATEGORYSI01\") == pm.globals.get(\"CATEGORYSI02\"));",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"",
									"        var requiredAttributes = ['id', 'href', 'name', 'description', 'state', 'category', 'startDate', 'serviceRelationship', 'serviceCharacteristic', 'supportingService', 'supportingResource', 'serviceSpecification', 'relatedParty', 'place',];",
									"",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"        pm.test('Response id attribute is of type string', function () { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response href attribute is of type string', function () { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response name attribute is of type string', function () { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response description attribute is of type string', function () { pm.expect(instance.description).to.be.a('string'); });",
									"        pm.test('Response state attribute is of type string', function () { pm.expect(instance.state).to.be.a('string'); });",
									"        pm.test('Response category attribute is of type string', function () { pm.expect(instance.category).to.be.a('string'); });",
									"        pm.test('Response startDate attribute is of type string', function () { pm.expect(instance.startDate).to.be.a('string'); });",
									"        pm.test('Response serviceRelationship attribute is of type array', function () { pm.expect(instance.serviceRelationship).to.be.a('array'); });",
									"        pm.test('Response serviceRelationship.relationshipType attribute is of type string', function () { pm.expect(instance.serviceRelationship[0].relationshipType).to.be.a('string'); });",
									"        pm.test('Response serviceRelationship.service attribute is of type object', function () { pm.expect(instance.serviceRelationship[0].service).to.be.an('object'); });",
									"        pm.test('Response serviceCharacteristic attribute is of type array', function () { pm.expect(instance.serviceCharacteristic).to.be.a('array'); });",
									"        pm.test('Response serviceCharacteristic.valueType attribute is of type string', function () { pm.expect(instance.serviceCharacteristic[0].valueType).to.be.a('string'); });",
									"        pm.test('Response serviceCharacteristic.value attribute is of type object', function () { pm.expect(instance.serviceCharacteristic[0].value).to.be.an('object'); });",
									"        pm.test('Response supportingService attribute is of type array', function () { pm.expect(instance.supportingService).to.be.a('array'); });",
									"        pm.test('Response supportingService.id attribute is of type string', function () { pm.expect(instance.supportingService[0].id).to.be.a('string'); });",
									"        pm.test('Response supportingService.href attribute is of type string', function () { pm.expect(instance.supportingService[0].href).to.be.a('string'); });",
									"        pm.test('Response supportingResource attribute is of type array', function () { pm.expect(instance.supportingResource).to.be.a('array'); });",
									"        pm.test('Response supportingResource.id attribute is of type string', function () { pm.expect(instance.supportingResource[0].id).to.be.a('string'); });",
									"        pm.test('Response supportingResource.href attribute is of type string', function () { pm.expect(instance.supportingResource[0].href).to.be.a('string'); });",
									"        pm.test('Response serviceSpecification attribute is of type object', function () { pm.expect(instance.serviceSpecification).to.be.a('object'); });",
									"        pm.test('Response serviceSpecification.id attribute is of type string', function () { pm.expect(instance.serviceSpecification.id).to.be.a('string'); });",
									"        pm.test('Response serviceSpecification.href attribute is of type string', function () { pm.expect(instance.serviceSpecification.href).to.be.a('string'); });",
									"        pm.test('Response serviceSpecification.version attribute is of type string', function () { pm.expect(instance.serviceSpecification.version).to.be.a('string'); });",
									"        pm.test('Response relatedParty attribute is of type array', function () { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"        pm.test('Response relatedParty.id attribute is of type string', function () { pm.expect(instance.relatedParty[0].id).to.be.a('string'); });",
									"        pm.test('Response relatedParty.href attribute is of type string', function () { pm.expect(instance.relatedParty[0].href).to.be.a('string'); });",
									"        pm.test('Response relatedParty.role attribute is of type string', function () { pm.expect(instance.relatedParty[0].role).to.be.a('string'); });",
									"        pm.test('Response place attribute is of type array', function () { pm.expect(instance.place).to.be.a('array'); });",
									"        pm.test('Response place.id attribute is of type string', function () { pm.expect(instance.place[0].id).to.be.a('string'); });",
									"        pm.test('Response place.href attribute is of type string', function () { pm.expect(instance.place[0].href).to.be.a('string'); });",
									"",
									"",
									"        pm.test(\"Body includes value held on id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.id);",
									"        });",
									"        pm.test(\"Body includes value held on href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.href);",
									"        });",
									"        pm.test(\"Body includes value held on name\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.name);",
									"        });",
									"        pm.test(\"Body includes value held on description\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.description);",
									"        });",
									"        pm.test(\"Body includes value held on state\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.state);",
									"        });",
									"        pm.test(\"Body includes value held on category\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.category);",
									"        });",
									"        pm.test(\"Body includes value held on startDate\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.startDate);",
									"        });",
									"        pm.test(\"Body includes value held on serviceRelationship[0].relationshipType\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceRelationship[0].relationshipType);",
									"        });",
									"        pm.test(\"Body includes value held on serviceCharacteristic[0].valueType\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceCharacteristic[0].valueType);",
									"        });",
									"        pm.test(\"Body includes value held on supportingService[0].id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.supportingService[0].id);",
									"        });",
									"        pm.test(\"Body includes value held on supportingService[0].href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.supportingService[0].href);",
									"        });",
									"        pm.test(\"Body includes value held on supportingResource[0].id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.supportingResource[0].id);",
									"        });",
									"        pm.test(\"Body includes value held on supportingResource[0].href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.supportingResource[0].href);",
									"        });",
									"        pm.test(\"Body includes value held on serviceSpecification.id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceSpecification.id);",
									"        });",
									"        pm.test(\"Body includes value held on serviceSpecification.href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceSpecification.href);",
									"        });",
									"        pm.test(\"Body includes value held on serviceSpecification.version\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceSpecification.version);",
									"        });",
									"        pm.test(\"Body includes value held on relatedParty[0].id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.relatedParty[0].id);",
									"        });",
									"        pm.test(\"Body includes value held on relatedParty[0].href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.relatedParty[0].href);",
									"        });",
									"        pm.test(\"Body includes value held on relatedParty[0].role\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.relatedParty[0].role);",
									"        });",
									"        pm.test(\"Body includes value held on place[0].id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.place[0].id);",
									"        });",
									"        pm.test(\"Body includes value held on place[0].href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.place[0].href);",
									"        });",
									"",
									"",
									"",
									"",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSI01\")) {",
									"",
									"            pm.test('id is ' + pm.globals.get(\"IDSI01\"), function () { pm.expect(instance.id) == pm.globals.get(\"IDSI01\"); });",
									"            pm.test('href is ' + pm.globals.get(\"HREFSI01\"), function () { pm.expect(instance.href) == pm.globals.get(\"HREFSI01\"); });",
									"            pm.test('name is ' + pm.globals.get(\"NAMESI01\"), function () { pm.expect(instance.name) == pm.globals.get(\"NAMESI01\"); });",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSI01\"), function () { pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI01\"); });",
									"            pm.test('state is ' + pm.globals.get(\"STATESI01\"), function () { pm.expect(instance.state) == pm.globals.get(\"STATESI01\"); });",
									"            pm.test('category is ' + pm.globals.get(\"CATEGORYSI01\"), function () { pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI01\"); });",
									"            pm.test('startDate is ' + pm.globals.get(\"STARTDATESI01\"), function () { pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI01\"); });",
									"            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSI01\"), function () { pm.expect(instance.serviceRelationship) == pm.globals.get(\"SERVICERELATIONSHIPSI01\"); });",
									"            pm.test('SERVICERELATIONSHIP_RELATIONSHIPTYPESI is ' + pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI01\"), function () { pm.expect(instance.serviceRelationship[0].relationshipType) == pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI01\"); });",
									"            pm.test('SERVICERELATIONSHIP_SERVICESI is ' + pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI01\"), function () { pm.expect(instance.serviceRelationship[0].service) == pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI01\"); });",
									"            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSI01\"), function () { pm.expect(instance.serviceCharacteristic) == pm.globals.get(\"SERVICECHARACTERISTICSI01\"); });",
									"            pm.test('SERVICECHARACTERISTIC_VALUETYPESI is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\"), function () { pm.expect(instance.serviceCharacteristic[0].valueType) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\"); });",
									"            pm.test('SERVICECHARACTERISTIC_VALUESI is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI01\"), function () { pm.expect(instance.serviceCharacteristic[0].value) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI01\"); });",
									"            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESI01\"), function () { pm.expect(instance.supportingService) == pm.globals.get(\"SUPPORTINGSERVICESI01\"); });",
									"            pm.test('SUPPORTINGSERVICE_IDSI is ' + pm.globals.get(\"SUPPORTINGSERVICE_IDSI01\"), function () { pm.expect(instance.supportingService[0].id) == pm.globals.get(\"SUPPORTINGSERVICE_IDSI01\"); });",
									"            pm.test('SUPPORTINGSERVICE_HREFSI is ' + pm.globals.get(\"SUPPORTINGSERVICE_HREFSI01\"), function () { pm.expect(instance.supportingService[0].href) == pm.globals.get(\"SUPPORTINGSERVICE_HREFSI01\"); });",
									"            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESI01\"), function () { pm.expect(instance.supportingResource) == pm.globals.get(\"SUPPORTINGRESOURCESI01\"); });",
									"            pm.test('SUPPORTINGRESOURCE_IDSI is ' + pm.globals.get(\"SUPPORTINGRESOURCE_IDSI01\"), function () { pm.expect(instance.supportingResource[0].id) == pm.globals.get(\"SUPPORTINGRESOURCE_IDSI01\"); });",
									"            pm.test('SUPPORTINGRESOURCE_HREFSI is ' + pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI01\"), function () { pm.expect(instance.supportingResource[0].href) == pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI01\"); });",
									"            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSI01\"), function () { pm.expect(instance.serviceSpecification) == pm.globals.get(\"SERVICESPECIFICATIONSI01\"); });",
									"            pm.test('SERVICESPECIFICATION_IDSI is ' + pm.globals.get(\"SERVICESPECIFICATION_IDSI01\"), function () { pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI01\"); });",
									"            pm.test('SERVICESPECIFICATION_HREFSI is ' + pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\"), function () { pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\"); });",
									"            pm.test('SERVICESPECIFICATION_VERSIONSI is ' + pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\"), function () { pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\"); });",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSI01\"), function () { pm.expect(instance.relatedParty) == pm.globals.get(\"RELATEDPARTYSI01\"); });",
									"            pm.test('RELATEDPARTY_IDSI is ' + pm.globals.get(\"RELATEDPARTY_IDSI01\"), function () { pm.expect(instance.relatedParty[0].id) == pm.globals.get(\"RELATEDPARTY_IDSI01\"); });",
									"            pm.test('RELATEDPARTY_HREFSI is ' + pm.globals.get(\"RELATEDPARTY_HREFSI01\"), function () { pm.expect(instance.relatedParty[0].href) == pm.globals.get(\"RELATEDPARTY_HREFSI01\"); });",
									"            pm.test('RELATEDPARTY_ROLESI is ' + pm.globals.get(\"RELATEDPARTY_ROLESI01\"), function () { pm.expect(instance.relatedParty[0].role) == pm.globals.get(\"RELATEDPARTY_ROLESI01\"); });",
									"            pm.test('place is ' + pm.globals.get(\"PLACESI01\"), function () { pm.expect(instance.place) == pm.globals.get(\"PLACESI01\"); });",
									"            pm.test('PLACE_IDSI is ' + pm.globals.get(\"PLACE_IDSI01\"), function () { pm.expect(instance.place[0].id) == pm.globals.get(\"PLACE_IDSI01\"); });",
									"            pm.test('PLACE_HREFSI is ' + pm.globals.get(\"PLACE_HREFSI01\"), function () { pm.expect(instance.place[0].href) == pm.globals.get(\"PLACE_HREFSI01\"); });",
									"",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSI02\")) {",
									"",
									"            pm.test('id is ' + pm.globals.get(\"IDSI02\"), function () { pm.expect(instance.id) == pm.globals.get(\"IDSI02\"); });",
									"            pm.test('href is ' + pm.globals.get(\"HREFSI02\"), function () { pm.expect(instance.href) == pm.globals.get(\"HREFSI02\"); });",
									"            pm.test('name is ' + pm.globals.get(\"NAMESI02\"), function () { pm.expect(instance.name) == pm.globals.get(\"NAMESI02\"); });",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSI02\"), function () { pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI02\"); });",
									"            pm.test('state is ' + pm.globals.get(\"STATESI02\"), function () { pm.expect(instance.state) == pm.globals.get(\"STATESI02\"); });",
									"            pm.test('category is ' + pm.globals.get(\"CATEGORYSI02\"), function () { pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI02\"); });",
									"            pm.test('startDate is ' + pm.globals.get(\"STARTDATESI02\"), function () { pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI02\"); });",
									"            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSI02\"), function () { pm.expect(instance.serviceRelationship) == pm.globals.get(\"SERVICERELATIONSHIPSI02\"); });",
									"            pm.test('SERVICERELATIONSHIP_RELATIONSHIPTYPESI is ' + pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI02\"), function () { pm.expect(instance.serviceRelationship[0].relationshipType) == pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI02\"); });",
									"            pm.test('SERVICERELATIONSHIP_SERVICESI is ' + pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI02\"), function () { pm.expect(instance.serviceRelationship[0].service) == pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI02\"); });",
									"            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSI02\"), function () { pm.expect(instance.serviceCharacteristic) == pm.globals.get(\"SERVICECHARACTERISTICSI02\"); });",
									"            pm.test('SERVICECHARACTERISTIC_VALUETYPESI is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI02\"), function () { pm.expect(instance.serviceCharacteristic[0].valueType) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI02\"); });",
									"            pm.test('SERVICECHARACTERISTIC_VALUESI is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI02\"), function () { pm.expect(instance.serviceCharacteristic[0].value) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI02\"); });",
									"            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESI02\"), function () { pm.expect(instance.supportingService) == pm.globals.get(\"SUPPORTINGSERVICESI02\"); });",
									"            pm.test('SUPPORTINGSERVICE_IDSI is ' + pm.globals.get(\"SUPPORTINGSERVICE_IDSI02\"), function () { pm.expect(instance.supportingService[0].id) == pm.globals.get(\"SUPPORTINGSERVICE_IDSI02\"); });",
									"            pm.test('SUPPORTINGSERVICE_HREFSI is ' + pm.globals.get(\"SUPPORTINGSERVICE_HREFSI02\"), function () { pm.expect(instance.supportingService[0].href) == pm.globals.get(\"SUPPORTINGSERVICE_HREFSI02\"); });",
									"            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESI02\"), function () { pm.expect(instance.supportingResource) == pm.globals.get(\"SUPPORTINGRESOURCESI02\"); });",
									"            pm.test('SUPPORTINGRESOURCE_IDSI is ' + pm.globals.get(\"SUPPORTINGRESOURCE_IDSI02\"), function () { pm.expect(instance.supportingResource[0].id) == pm.globals.get(\"SUPPORTINGRESOURCE_IDSI02\"); });",
									"            pm.test('SUPPORTINGRESOURCE_HREFSI is ' + pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI02\"), function () { pm.expect(instance.supportingResource[0].href) == pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI02\"); });",
									"            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSI02\"), function () { pm.expect(instance.serviceSpecification) == pm.globals.get(\"SERVICESPECIFICATIONSI02\"); });",
									"            pm.test('SERVICESPECIFICATION_IDSI is ' + pm.globals.get(\"SERVICESPECIFICATION_IDSI02\"), function () { pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI02\"); });",
									"            pm.test('SERVICESPECIFICATION_HREFSI is ' + pm.globals.get(\"SERVICESPECIFICATION_HREFSI02\"), function () { pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI02\"); });",
									"            pm.test('SERVICESPECIFICATION_VERSIONSI is ' + pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI02\"), function () { pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI02\"); });",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSI02\"), function () { pm.expect(instance.relatedParty) == pm.globals.get(\"RELATEDPARTYSI02\"); });",
									"            pm.test('RELATEDPARTY_IDSI is ' + pm.globals.get(\"RELATEDPARTY_IDSI02\"), function () { pm.expect(instance.relatedParty[0].id) == pm.globals.get(\"RELATEDPARTY_IDSI02\"); });",
									"            pm.test('RELATEDPARTY_HREFSI is ' + pm.globals.get(\"RELATEDPARTY_HREFSI02\"), function () { pm.expect(instance.relatedParty[0].href) == pm.globals.get(\"RELATEDPARTY_HREFSI02\"); });",
									"            pm.test('RELATEDPARTY_ROLESI is ' + pm.globals.get(\"RELATEDPARTY_ROLESI02\"), function () { pm.expect(instance.relatedParty[0].role) == pm.globals.get(\"RELATEDPARTY_ROLESI02\"); });",
									"            pm.test('place is ' + pm.globals.get(\"PLACESI02\"), function () { pm.expect(instance.place) == pm.globals.get(\"PLACESI02\"); });",
									"            pm.test('PLACE_IDSI is ' + pm.globals.get(\"PLACE_IDSI02\"), function () { pm.expect(instance.place[0].id) == pm.globals.get(\"PLACE_IDSI02\"); });",
									"            pm.test('PLACE_HREFSI is ' + pm.globals.get(\"PLACE_HREFSI02\"), function () { pm.expect(instance.place[0].href) == pm.globals.get(\"PLACE_HREFSI02\"); });",
									"",
									"        }",
									"",
									"    });",
									"}",
									"else {",
									"    pm.test('Array with multiple elements expected as response', function () { pm.expect.fail() });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service/?category={{CATEGORYSI01}}",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service",
								""
							],
							"query": [
								{
									"key": "category",
									"value": "{{CATEGORYSI01}}"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				},
				{
					"name": "Retrieve a Filtered List with only one Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6192157-a527-40fe-b2ad-de1245a89f9a",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"// Testing POST method on {{scheme}}://{{host}}:{{port}}/tmf-api/serviceOrdering/v3/serviceOrder",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    var requiredAttributes = [ 'id','href','name','description','state','category','startDate','serviceRelationship','serviceCharacteristic'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"    // Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has description attribute', function() { pm.expect(instance.description).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string') });",
									"    pm.test('Response has category attribute', function() { pm.expect(instance.category).to.be.a('string'); });",
									"    pm.test('Response has startDate attribute', function() { pm.expect(instance.startDate).to.be.a('string'); });",
									"    pm.test('Response has note attribute', function() { pm.expect(instance.note) });",
									"    pm.test('Response has Service Relationship attribute', function() { pm.expect(instance.serviceRelationship).to.be.an.instanceOf(Array); });",
									"    ",
									"    ",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDSI01\")){",
									"            ",
									"            //The body of the response matches the values set in the original request",
									"        ",
									"        pm.test('id is ' + pm.globals.get(\"IDSI01\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDSI01\");});",
									"        pm.test('name is ' + pm.globals.get(\"NAMESI01\"), function() {pm.expect(instance.name) == pm.globals.get(\"NAMESI01\");});",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSI01\"), function() {pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI01\");});",
									"        pm.test('state is ' + pm.globals.get(\"STATESI01\"), function() {pm.expect(instance.state) == pm.globals.get(\"STATESI01\");});",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSI01\"), function() {pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI01\");});",
									"        pm.test('startDate is ' + pm.globals.get(\"STARTDATESI01\"), function() {pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI01\");});",
									"        ",
									"        //Service Specification sub-attributes.",
									"        ",
									"        pm.test('serviceSpecification.id is ' + pm.globals.get(\"SERVICESPECIFICATION_IDSI01\"), function() {pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI01\")});",
									"        ",
									"        //The Href can be different from server to server",
									"        pm.test('serviceSpecification.href is ' + pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\"), function() {pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\");});",
									"        ",
									"        pm.test('serviceSpecification.version is ' + pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\"), function() {pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\")});",
									"        ",
									"        ",
									"        //Service Characteristic sub-attributes.",
									"        var serviceCharacteristic = instance.serviceCharacteristic[0];",
									"        pm.test('serviceCharacteristic.valueType is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\"), function() {pm.expect(serviceCharacteristic.valueType) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\")});",
									"        pm.test('serviceCharacteristic.value.@type is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI01\"), function() {pm.expect(serviceCharacteristic.value['@type']) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI01\")});",
									"        pm.test('serviceCharacteristic.value.@schemaLocation is' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI01\"), function() {pm.expect(serviceCharacteristic.value['@schemaLocation']) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI01\");});",
									"        ",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDSI02\")){",
									"        ",
									"       pm.test('Service ID '+ pm.globals.get(\"IDSI02\")  +' was not supposed to be returned by this filtered search, you need to have services with 2 different states', function() {",
									"           pm.expect.fail();",
									"       });",
									"       ",
									"    }",
									"   ",
									"  });",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service/?state={{STATESI01}}",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service",
								""
							],
							"query": [
								{
									"key": "state",
									"value": "{{STATESI01}}"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				},
				{
					"name": "Retrieve a Filtered List with only one Service using name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e9c4224-1fad-48df-8ece-8f74a146a57c",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"        var requiredAttributes = ['id', 'href', 'name', 'description', 'state', 'category', 'startDate', 'serviceRelationship', 'serviceCharacteristic', 'supportingService', 'supportingResource', 'serviceSpecification', 'relatedParty', 'place',]",
									"",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"        pm.test('Response id attribute is of type string', function () { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response href attribute is of type string', function () { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response name attribute is of type string', function () { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response description attribute is of type string', function () { pm.expect(instance.description).to.be.a('string'); });",
									"        pm.test('Response state attribute is of type string', function () { pm.expect(instance.state).to.be.a('string'); });",
									"        pm.test('Response category attribute is of type string', function () { pm.expect(instance.category).to.be.a('string'); });",
									"        pm.test('Response startDate attribute is of type string', function () { pm.expect(instance.startDate).to.be.a('string'); });",
									"        pm.test('Response serviceRelationship attribute is of type array', function () { pm.expect(instance.serviceRelationship).to.be.a('array'); });",
									"        pm.test('Response serviceRelationship.relationshipType attribute is of type string', function () { pm.expect(instance.serviceRelationship[0].relationshipType).to.be.a('string'); });",
									"        pm.test('Response serviceRelationship.service attribute is of type object', function () { pm.expect(instance.serviceRelationship[0].service).to.be.an('object'); });",
									"        pm.test('Response serviceCharacteristic attribute is of type array', function () { pm.expect(instance.serviceCharacteristic).to.be.a('array'); });",
									"        pm.test('Response serviceCharacteristic.valueType attribute is of type string', function () { pm.expect(instance.serviceCharacteristic[0].valueType).to.be.a('string'); });",
									"        pm.test('Response serviceCharacteristic.value attribute is of type object', function () { pm.expect(instance.serviceCharacteristic[0].value).to.be.an('object'); });",
									"        pm.test('Response supportingService attribute is of type array', function () { pm.expect(instance.supportingService).to.be.a('array'); });",
									"        pm.test('Response supportingService.id attribute is of type string', function () { pm.expect(instance.supportingService[0].id).to.be.a('string'); });",
									"        pm.test('Response supportingService.href attribute is of type string', function () { pm.expect(instance.supportingService[0].href).to.be.a('string'); });",
									"        pm.test('Response supportingResource attribute is of type array', function () { pm.expect(instance.supportingResource).to.be.a('array'); });",
									"        pm.test('Response supportingResource.id attribute is of type string', function () { pm.expect(instance.supportingResource[0].id).to.be.a('string'); });",
									"        pm.test('Response supportingResource.href attribute is of type string', function () { pm.expect(instance.supportingResource[0].href).to.be.a('string'); });",
									"        pm.test('Response serviceSpecification attribute is of type object', function () { pm.expect(instance.serviceSpecification).to.be.a('object'); });",
									"        pm.test('Response serviceSpecification.id attribute is of type string', function () { pm.expect(instance.serviceSpecification.id).to.be.a('string'); });",
									"        pm.test('Response serviceSpecification.href attribute is of type string', function () { pm.expect(instance.serviceSpecification.href).to.be.a('string'); });",
									"        pm.test('Response serviceSpecification.version attribute is of type string', function () { pm.expect(instance.serviceSpecification.version).to.be.a('string'); });",
									"        pm.test('Response relatedParty attribute is of type array', function () { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"        pm.test('Response relatedParty.id attribute is of type string', function () { pm.expect(instance.relatedParty[0].id).to.be.a('string'); });",
									"        pm.test('Response relatedParty.href attribute is of type string', function () { pm.expect(instance.relatedParty[0].href).to.be.a('string'); });",
									"        pm.test('Response relatedParty.role attribute is of type string', function () { pm.expect(instance.relatedParty[0].role).to.be.a('string'); });",
									"        pm.test('Response place attribute is of type array', function () { pm.expect(instance.place).to.be.a('array'); });",
									"        pm.test('Response place.id attribute is of type string', function () { pm.expect(instance.place[0].id).to.be.a('string'); });",
									"        pm.test('Response place.href attribute is of type string', function () { pm.expect(instance.place[0].href).to.be.a('string'); });",
									"",
									"",
									"        pm.test(\"Body includes value held on id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.id);",
									"        });",
									"        pm.test(\"Body includes value held on href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.href);",
									"        });",
									"        pm.test(\"Body includes value held on name\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.name);",
									"        });",
									"        pm.test(\"Body includes value held on description\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.description);",
									"        });",
									"        pm.test(\"Body includes value held on state\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.state);",
									"        });",
									"        pm.test(\"Body includes value held on category\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.category);",
									"        });",
									"        pm.test(\"Body includes value held on startDate\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.startDate);",
									"        });",
									"        pm.test(\"Body includes value held on serviceRelationship[0].relationshipType\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceRelationship[0].relationshipType);",
									"        });",
									"        pm.test(\"Body includes value held on serviceCharacteristic[0].valueType\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceCharacteristic[0].valueType);",
									"        });",
									"        pm.test(\"Body includes value held on supportingService[0].id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.supportingService[0].id);",
									"        });",
									"        pm.test(\"Body includes value held on supportingService[0].href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.supportingService[0].href);",
									"        });",
									"        pm.test(\"Body includes value held on supportingResource[0].id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.supportingResource[0].id);",
									"        });",
									"        pm.test(\"Body includes value held on supportingResource[0].href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.supportingResource[0].href);",
									"        });",
									"        pm.test(\"Body includes value held on serviceSpecification.id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceSpecification.id);",
									"        });",
									"        pm.test(\"Body includes value held on serviceSpecification.href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceSpecification.href);",
									"        });",
									"        pm.test(\"Body includes value held on serviceSpecification.version\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.serviceSpecification.version);",
									"        });",
									"        pm.test(\"Body includes value held on relatedParty[0].id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.relatedParty[0].id);",
									"        });",
									"        pm.test(\"Body includes value held on relatedParty[0].href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.relatedParty[0].href);",
									"        });",
									"        pm.test(\"Body includes value held on relatedParty[0].role\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.relatedParty[0].role);",
									"        });",
									"        pm.test(\"Body includes value held on place[0].id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.place[0].id);",
									"        });",
									"        pm.test(\"Body includes value held on place[0].href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.place[0].href);",
									"        });",
									"",
									"",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSI02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDSI01\"), function () { pm.expect(instance.id) == pm.globals.get(\"IDSI01\"); });",
									"            pm.test('href is ' + pm.globals.get(\"HREFSI01\"), function () { pm.expect(instance.href) == pm.globals.get(\"HREFSI01\"); });",
									"            pm.test('name is ' + pm.globals.get(\"NAMESI01\"), function () { pm.expect(instance.name) == pm.globals.get(\"NAMESI01\"); });",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSI01\"), function () { pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI01\"); });",
									"            pm.test('state is ' + pm.globals.get(\"STATESI01\"), function () { pm.expect(instance.state) == pm.globals.get(\"STATESI01\"); });",
									"            pm.test('category is ' + pm.globals.get(\"CATEGORYSI01\"), function () { pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI01\"); });",
									"            pm.test('startDate is ' + pm.globals.get(\"STARTDATESI01\"), function () { pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI01\"); });",
									"            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSI01\"), function () { pm.expect(instance.serviceRelationship) == pm.globals.get(\"SERVICERELATIONSHIPSI01\"); });",
									"            pm.test('SERVICERELATIONSHIP_RELATIONSHIPTYPESI is ' + pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI01\"), function () { pm.expect(instance.serviceRelationship[0].relationshipType) == pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI01\"); });",
									"            pm.test('SERVICERELATIONSHIP_SERVICESI is ' + pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI01\"), function () { pm.expect(instance.serviceRelationship[0].service) == pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI01\"); });",
									"            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSI01\"), function () { pm.expect(instance.serviceCharacteristic) == pm.globals.get(\"SERVICECHARACTERISTICSI01\"); });",
									"            pm.test('SERVICECHARACTERISTIC_VALUETYPESI is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\"), function () { pm.expect(instance.serviceCharacteristic[0].valueType) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\"); });",
									"            pm.test('SERVICECHARACTERISTIC_VALUESI is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI01\"), function () { pm.expect(instance.serviceCharacteristic[0].value) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI01\"); });",
									"            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESI01\"), function () { pm.expect(instance.supportingService) == pm.globals.get(\"SUPPORTINGSERVICESI01\"); });",
									"            pm.test('SUPPORTINGSERVICE_IDSI is ' + pm.globals.get(\"SUPPORTINGSERVICE_IDSI01\"), function () { pm.expect(instance.supportingService[0].id) == pm.globals.get(\"SUPPORTINGSERVICE_IDSI01\"); });",
									"            pm.test('SUPPORTINGSERVICE_HREFSI is ' + pm.globals.get(\"SUPPORTINGSERVICE_HREFSI01\"), function () { pm.expect(instance.supportingService[0].href) == pm.globals.get(\"SUPPORTINGSERVICE_HREFSI01\"); });",
									"            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESI01\"), function () { pm.expect(instance.supportingResource) == pm.globals.get(\"SUPPORTINGRESOURCESI01\"); });",
									"            pm.test('SUPPORTINGRESOURCE_IDSI is ' + pm.globals.get(\"SUPPORTINGRESOURCE_IDSI01\"), function () { pm.expect(instance.supportingResource[0].id) == pm.globals.get(\"SUPPORTINGRESOURCE_IDSI01\"); });",
									"            pm.test('SUPPORTINGRESOURCE_HREFSI is ' + pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI01\"), function () { pm.expect(instance.supportingResource[0].href) == pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI01\"); });",
									"            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSI01\"), function () { pm.expect(instance.serviceSpecification) == pm.globals.get(\"SERVICESPECIFICATIONSI01\"); });",
									"            pm.test('SERVICESPECIFICATION_IDSI is ' + pm.globals.get(\"SERVICESPECIFICATION_IDSI01\"), function () { pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI01\"); });",
									"            pm.test('SERVICESPECIFICATION_HREFSI is ' + pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\"), function () { pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\"); });",
									"            pm.test('SERVICESPECIFICATION_VERSIONSI is ' + pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\"), function () { pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\"); });",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSI01\"), function () { pm.expect(instance.relatedParty) == pm.globals.get(\"RELATEDPARTYSI01\"); });",
									"            pm.test('RELATEDPARTY_IDSI is ' + pm.globals.get(\"RELATEDPARTY_IDSI01\"), function () { pm.expect(instance.relatedParty[0].id) == pm.globals.get(\"RELATEDPARTY_IDSI01\"); });",
									"            pm.test('RELATEDPARTY_HREFSI is ' + pm.globals.get(\"RELATEDPARTY_HREFSI01\"), function () { pm.expect(instance.relatedParty[0].href) == pm.globals.get(\"RELATEDPARTY_HREFSI01\"); });",
									"            pm.test('RELATEDPARTY_ROLESI is ' + pm.globals.get(\"RELATEDPARTY_ROLESI01\"), function () { pm.expect(instance.relatedParty[0].role) == pm.globals.get(\"RELATEDPARTY_ROLESI01\"); });",
									"            pm.test('place is ' + pm.globals.get(\"PLACESI01\"), function () { pm.expect(instance.place) == pm.globals.get(\"PLACESI01\"); });",
									"            pm.test('PLACE_IDSI is ' + pm.globals.get(\"PLACE_IDSI01\"), function () { pm.expect(instance.place[0].id) == pm.globals.get(\"PLACE_IDSI01\"); });",
									"            pm.test('PLACE_HREFSI is ' + pm.globals.get(\"PLACE_HREFSI01\"), function () { pm.expect(instance.place[0].href) == pm.globals.get(\"PLACE_HREFSI01\"); });",
									"",
									"",
									"        }",
									"",
									"        if (instance.id == pm.globals.get(\"IDSI01\")) {",
									"",
									"            pm.test('Service ID ' + pm.globals.get(\"IDSI01\") + ' was not supposed to be returned by this filtered search, you need to have services with 2 different states', function () {",
									"                pm.expect.fail();",
									"            });",
									"",
									"        }",
									"",
									"    });",
									"}",
									"",
									"else {",
									"",
									"    var instance = pm.response.json();",
									"",
									"    var requiredAttributes = ['id', 'href', 'name', 'description', 'state', 'category', 'startDate', 'serviceRelationship', 'serviceCharacteristic', 'supportingService', 'supportingResource', 'serviceSpecification', 'relatedParty', 'place',]",
									"",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"    pm.test('Response id attribute is of type string', function () { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response href attribute is of type string', function () { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response name attribute is of type string', function () { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response description attribute is of type string', function () { pm.expect(instance.description).to.be.a('string'); });",
									"    pm.test('Response state attribute is of type string', function () { pm.expect(instance.state).to.be.a('string'); });",
									"    pm.test('Response category attribute is of type string', function () { pm.expect(instance.category).to.be.a('string'); });",
									"    pm.test('Response startDate attribute is of type string', function () { pm.expect(instance.startDate).to.be.a('string'); });",
									"    pm.test('Response serviceRelationship attribute is of type array', function () { pm.expect(instance.serviceRelationship).to.be.a('array'); });",
									"    pm.test('Response serviceRelationship.relationshipType attribute is of type string', function () { pm.expect(instance.serviceRelationship[0].relationshipType).to.be.a('string'); });",
									"    pm.test('Response serviceRelationship.service attribute is of type object', function () { pm.expect(instance.serviceRelationship[0].service).to.be.an('object'); });",
									"    pm.test('Response serviceCharacteristic attribute is of type array', function () { pm.expect(instance.serviceCharacteristic).to.be.a('array'); });",
									"    pm.test('Response serviceCharacteristic.valueType attribute is of type string', function () { pm.expect(instance.serviceCharacteristic[0].valueType).to.be.a('string'); });",
									"    pm.test('Response serviceCharacteristic.value attribute is of type object', function () { pm.expect(instance.serviceCharacteristic[0].value).to.be.an('object'); });",
									"    pm.test('Response supportingService attribute is of type array', function () { pm.expect(instance.supportingService).to.be.a('array'); });",
									"    pm.test('Response supportingService.id attribute is of type string', function () { pm.expect(instance.supportingService[0].id).to.be.a('string'); });",
									"    pm.test('Response supportingService.href attribute is of type string', function () { pm.expect(instance.supportingService[0].href).to.be.a('string'); });",
									"    pm.test('Response supportingResource attribute is of type array', function () { pm.expect(instance.supportingResource).to.be.a('array'); });",
									"    pm.test('Response supportingResource.id attribute is of type string', function () { pm.expect(instance.supportingResource[0].id).to.be.a('string'); });",
									"    pm.test('Response supportingResource.href attribute is of type string', function () { pm.expect(instance.supportingResource[0].href).to.be.a('string'); });",
									"    pm.test('Response serviceSpecification attribute is of type object', function () { pm.expect(instance.serviceSpecification).to.be.a('object'); });",
									"    pm.test('Response serviceSpecification.id attribute is of type string', function () { pm.expect(instance.serviceSpecification.id).to.be.a('string'); });",
									"    pm.test('Response serviceSpecification.href attribute is of type string', function () { pm.expect(instance.serviceSpecification.href).to.be.a('string'); });",
									"    pm.test('Response serviceSpecification.version attribute is of type string', function () { pm.expect(instance.serviceSpecification.version).to.be.a('string'); });",
									"    pm.test('Response relatedParty attribute is of type array', function () { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"    pm.test('Response relatedParty.id attribute is of type string', function () { pm.expect(instance.relatedParty[0].id).to.be.a('string'); });",
									"    pm.test('Response relatedParty.href attribute is of type string', function () { pm.expect(instance.relatedParty[0].href).to.be.a('string'); });",
									"    pm.test('Response relatedParty.role attribute is of type string', function () { pm.expect(instance.relatedParty[0].role).to.be.a('string'); });",
									"    pm.test('Response place attribute is of type array', function () { pm.expect(instance.place).to.be.a('array'); });",
									"    pm.test('Response place.id attribute is of type string', function () { pm.expect(instance.place[0].id).to.be.a('string'); });",
									"    pm.test('Response place.href attribute is of type string', function () { pm.expect(instance.place[0].href).to.be.a('string'); });",
									"",
									"",
									"    pm.test(\"Body includes value held on id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.id);",
									"    });",
									"    pm.test(\"Body includes value held on href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.href);",
									"    });",
									"    pm.test(\"Body includes value held on name\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.name);",
									"    });",
									"    pm.test(\"Body includes value held on description\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.description);",
									"    });",
									"    pm.test(\"Body includes value held on state\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.state);",
									"    });",
									"    pm.test(\"Body includes value held on category\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.category);",
									"    });",
									"    pm.test(\"Body includes value held on startDate\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.startDate);",
									"    });",
									"    pm.test(\"Body includes value held on serviceRelationship[0].relationshipType\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.serviceRelationship[0].relationshipType);",
									"    });",
									"    pm.test(\"Body includes value held on serviceCharacteristic[0].valueType\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.serviceCharacteristic[0].valueType);",
									"    });",
									"    pm.test(\"Body includes value held on supportingService[0].id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.supportingService[0].id);",
									"    });",
									"    pm.test(\"Body includes value held on supportingService[0].href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.supportingService[0].href);",
									"    });",
									"    pm.test(\"Body includes value held on supportingResource[0].id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.supportingResource[0].id);",
									"    });",
									"    pm.test(\"Body includes value held on supportingResource[0].href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.supportingResource[0].href);",
									"    });",
									"    pm.test(\"Body includes value held on serviceSpecification.id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.serviceSpecification.id);",
									"    });",
									"    pm.test(\"Body includes value held on serviceSpecification.href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.serviceSpecification.href);",
									"    });",
									"    pm.test(\"Body includes value held on serviceSpecification.version\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.serviceSpecification.version);",
									"    });",
									"    pm.test(\"Body includes value held on relatedParty[0].id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.relatedParty[0].id);",
									"    });",
									"    pm.test(\"Body includes value held on relatedParty[0].href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.relatedParty[0].href);",
									"    });",
									"    pm.test(\"Body includes value held on relatedParty[0].role\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.relatedParty[0].role);",
									"    });",
									"    pm.test(\"Body includes value held on place[0].id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.place[0].id);",
									"    });",
									"    pm.test(\"Body includes value held on place[0].href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.place[0].href);",
									"    });",
									"",
									"",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDSI02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDSI01\"), function () { pm.expect(instance.id) == pm.globals.get(\"IDSI01\"); });",
									"        pm.test('href is ' + pm.globals.get(\"HREFSI01\"), function () { pm.expect(instance.href) == pm.globals.get(\"HREFSI01\"); });",
									"        pm.test('name is ' + pm.globals.get(\"NAMESI01\"), function () { pm.expect(instance.name) == pm.globals.get(\"NAMESI01\"); });",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSI01\"), function () { pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI01\"); });",
									"        pm.test('state is ' + pm.globals.get(\"STATESI01\"), function () { pm.expect(instance.state) == pm.globals.get(\"STATESI01\"); });",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSI01\"), function () { pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI01\"); });",
									"        pm.test('startDate is ' + pm.globals.get(\"STARTDATESI01\"), function () { pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI01\"); });",
									"        pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSI01\"), function () { pm.expect(instance.serviceRelationship) == pm.globals.get(\"SERVICERELATIONSHIPSI01\"); });",
									"        pm.test('SERVICERELATIONSHIP_RELATIONSHIPTYPESI is ' + pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI01\"), function () { pm.expect(instance.serviceRelationship[0].relationshipType) == pm.globals.get(\"SERVICERELATIONSHIP_RELATIONSHIPTYPESI01\"); });",
									"        pm.test('SERVICERELATIONSHIP_SERVICESI is ' + pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI01\"), function () { pm.expect(instance.serviceRelationship[0].service) == pm.globals.get(\"SERVICERELATIONSHIP_SERVICESI01\"); });",
									"        pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSI01\"), function () { pm.expect(instance.serviceCharacteristic) == pm.globals.get(\"SERVICECHARACTERISTICSI01\"); });",
									"        pm.test('SERVICECHARACTERISTIC_VALUETYPESI is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\"), function () { pm.expect(instance.serviceCharacteristic[0].valueType) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\"); });",
									"        pm.test('SERVICECHARACTERISTIC_VALUESI is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI01\"), function () { pm.expect(instance.serviceCharacteristic[0].value) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUESI01\"); });",
									"        pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESI01\"), function () { pm.expect(instance.supportingService) == pm.globals.get(\"SUPPORTINGSERVICESI01\"); });",
									"        pm.test('SUPPORTINGSERVICE_IDSI is ' + pm.globals.get(\"SUPPORTINGSERVICE_IDSI01\"), function () { pm.expect(instance.supportingService[0].id) == pm.globals.get(\"SUPPORTINGSERVICE_IDSI01\"); });",
									"        pm.test('SUPPORTINGSERVICE_HREFSI is ' + pm.globals.get(\"SUPPORTINGSERVICE_HREFSI01\"), function () { pm.expect(instance.supportingService[0].href) == pm.globals.get(\"SUPPORTINGSERVICE_HREFSI01\"); });",
									"        pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESI01\"), function () { pm.expect(instance.supportingResource) == pm.globals.get(\"SUPPORTINGRESOURCESI01\"); });",
									"        pm.test('SUPPORTINGRESOURCE_IDSI is ' + pm.globals.get(\"SUPPORTINGRESOURCE_IDSI01\"), function () { pm.expect(instance.supportingResource[0].id) == pm.globals.get(\"SUPPORTINGRESOURCE_IDSI01\"); });",
									"        pm.test('SUPPORTINGRESOURCE_HREFSI is ' + pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI01\"), function () { pm.expect(instance.supportingResource[0].href) == pm.globals.get(\"SUPPORTINGRESOURCE_HREFSI01\"); });",
									"        pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSI01\"), function () { pm.expect(instance.serviceSpecification) == pm.globals.get(\"SERVICESPECIFICATIONSI01\"); });",
									"        pm.test('SERVICESPECIFICATION_IDSI is ' + pm.globals.get(\"SERVICESPECIFICATION_IDSI01\"), function () { pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI01\"); });",
									"        pm.test('SERVICESPECIFICATION_HREFSI is ' + pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\"), function () { pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\"); });",
									"        pm.test('SERVICESPECIFICATION_VERSIONSI is ' + pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\"), function () { pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\"); });",
									"        pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSI01\"), function () { pm.expect(instance.relatedParty) == pm.globals.get(\"RELATEDPARTYSI01\"); });",
									"        pm.test('RELATEDPARTY_IDSI is ' + pm.globals.get(\"RELATEDPARTY_IDSI01\"), function () { pm.expect(instance.relatedParty[0].id) == pm.globals.get(\"RELATEDPARTY_IDSI01\"); });",
									"        pm.test('RELATEDPARTY_HREFSI is ' + pm.globals.get(\"RELATEDPARTY_HREFSI01\"), function () { pm.expect(instance.relatedParty[0].href) == pm.globals.get(\"RELATEDPARTY_HREFSI01\"); });",
									"        pm.test('RELATEDPARTY_ROLESI is ' + pm.globals.get(\"RELATEDPARTY_ROLESI01\"), function () { pm.expect(instance.relatedParty[0].role) == pm.globals.get(\"RELATEDPARTY_ROLESI01\"); });",
									"        pm.test('place is ' + pm.globals.get(\"PLACESI01\"), function () { pm.expect(instance.place) == pm.globals.get(\"PLACESI01\"); });",
									"        pm.test('PLACE_IDSI is ' + pm.globals.get(\"PLACE_IDSI01\"), function () { pm.expect(instance.place[0].id) == pm.globals.get(\"PLACE_IDSI01\"); });",
									"        pm.test('PLACE_HREFSI is ' + pm.globals.get(\"PLACE_HREFSI01\"), function () { pm.expect(instance.place[0].href) == pm.globals.get(\"PLACE_HREFSI01\"); });",
									"",
									"",
									"    }",
									"",
									"    if (instance.id == pm.globals.get(\"IDSI01\")) {",
									"",
									"        pm.test('Service ID ' + pm.globals.get(\"IDSI01\") + ' was not supposed to be returned by this filtered search, you need to have services with 2 different states', function () {",
									"            pm.expect.fail();",
									"        });",
									"",
									"    }",
									"",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service?name={{NAMESI02}}",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMESI02}}"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "TC_ServiceActivation_N3 â€“ Filtered retrieval of service data",
			"item": [
				{
					"name": "Filtered fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f06d4aaa-a425-4723-84a7-e0e4d4694f10",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"if (Array.isArray(jsonData)) {",
									"  jsonData.forEach(function (instance, index) {",
									"    var requiredAttributes = ['name', 'state'];",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"    //We expect only 2 fields",
									"",
									"    pm.test('Instance has only filtered attributes', function () { pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length) });",
									"",
									"    // Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"",
									"    pm.test('Response has name attribute', function () { pm.expect(instance.name).to.be.a('string'); });",
									"",
									"    pm.test('Response has state attribute', function () { pm.expect(instance.state).to.be.a('string') });",
									"",
									"",
									"",
									"  });",
									"}",
									"else {",
									"  var instance = pm.response.json();",
									"  var requiredAttributes = ['name', 'state'];",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"    //We expect only 2 fields",
									"",
									"    pm.test('Instance has only filtered attributes', function () { pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length) });",
									"",
									"    // Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"",
									"    pm.test('Response has name attribute', function () { pm.expect(instance.name).to.be.a('string'); });",
									"",
									"    pm.test('Response has state attribute', function () { pm.expect(instance.state).to.be.a('string') });",
									"",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service/?fields=name,state",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service",
								""
							],
							"query": [
								{
									"key": "fields",
									"value": "name,state"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "TC_ServiceActivation_N4 â€“ Filtered Search and Filtered data response",
			"item": [
				{
					"name": "Filtered search by state and filtered fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f78374-79ad-4a05-98e2-62ee8a42814f",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"if (Array.isArray(jsonData)) {",
									"  jsonData.forEach(function (instance, index) {",
									"    var requiredAttributes = ['id', 'href'];",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"    //We expect only 2 fields",
									"",
									"    pm.test('Instance has only filtered attributes', function () { pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length) });",
									"",
									"    // Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"    pm.test('Response has id attribute', function () { pm.expect(instance.id).to.be.a('string'); });",
									"",
									"    pm.test('Response has href attribute', function () { pm.expect(instance.href).to.be.a('string') });",
									"",
									"",
									"  });",
									"}",
									"else {",
									"  var instance = pm.response.json();",
									"  var requiredAttributes = ['id', 'href'];",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"    //We expect only 2 fields",
									"",
									"    pm.test('Instance has only filtered attributes', function () { pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length) });",
									"",
									"    // Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"",
									"    pm.test('Response has id attribute', function () { pm.expect(instance.id).to.be.a('string'); });",
									"",
									"    pm.test('Response has href attribute', function () { pm.expect(instance.href).to.be.a('string') });",
									"",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service?state={{STATESI01}}&fields=id,href",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service"
							],
							"query": [
								{
									"key": "state",
									"value": "{{STATESI01}}"
								},
								{
									"key": "fields",
									"value": "id,href"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "TC_ServiceActivation_E1 â€“ Unknown Service",
			"item": [
				{
					"name": "Filtered search by state and filtered fields Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38f6bbe4-0a46-4416-8668-98f91bfedb34",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceActivationAPI}}/service/{{ID404}}",
							"host": [
								"{{ServiceActivationAPI}}"
							],
							"path": [
								"service",
								"{{ID404}}"
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			]
		}
	]
}